FREECADPATH = 'C:\Program Files\FreeCAD 0.14\lib'

import sys
sys.path.append(FREECADPATH)

import pickle
import FreeCAD



class Vertice:
    def __init__(self, index, coordlist):

        try:
            isinstance(coordlist, list)
            isinstance(index, list)

        except:
            raise NameError('index is of list of integers and coordlist is a list')

        self.coordinates = coordlist
        self.index = index

class Edge:
    def __init__(self, index, vertice1, vertice2):
        try:
            isinstance(vertice1, Vertice)
            isinstance(vertice2, Vertice)
            isinstance(vertice1.coordinates, list)
            isinstance(vertice2.coordinates, list)

        except:
            raise NameError('index is of list of integers')

        self.vertice1 = vertice1
        self.vertice2 = vertice2
        self.interiorvertices = []
        self.index = [index]

    def addvertice(self, param):
        try:
            0 <= param <= 1

        except:
            raise NameError('param should be comprised between 0 and 1')
        #use linear shape function to calculate the coordinate of the interior vertice
        if isinstance(self.vertice1.coordinates, int):
            dimension = 1
        else:
            dimension = len(self.vertice1.coordinates)
        newcoord = []
        for i in range(0, dimension):
            newcoord.append(Rational((1-param)*float(self.vertice1.coordinates[i]) +
                            param * float(self.vertice2.coordinates[i])))
        newindex = [self.index[0], len(self.interiorvertices) + 1]
        addedvertice = Vertice(newindex, newcoord)
        self.interiorvertices.append(addedvertice)

def main():

    doc = FreeCAD.open("C:/Users/User/Desktop/NIST/Subject_NIST/CAD_Data/bridge.FCStd")
    fcverticelist = doc.Sketch.Shape.Vertexes
    fcedgelist = doc.Sketch.Shape.Edges


    numnodes = len(fcverticelist)
    verticelist = []
    for i in range(0, numnodes):
        index = [i, id(fcverticelist[i])]
        coordlist = []
        for j in range(0, 3):
            coordlist.append(fcverticelist[i].Point[j])
        verticelist.append(Vertice(index,coordlist))

    print(verticelist[2])

    edgelist = []
    for i in range(0, len(fcedgelist)):
        edgevertice = []
        for j in range(0, 2):
            coordlist = []
            for k in range(0,3):
                coordlist.append(fcedgelist[i].Vertexes[j].Point[k])
            edgevertice.append(Vertice(id(fcedgelist[i].Vertexes[j]), coordlist))
        edgelist.append(Edge(i,edgevertice[0], edgevertice[1]))


    pickle.dump([verticelist,edgelist], open("save.p", "wb" ))

if __name__ == "__main__":
    main()
